// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MembershipRefunded extends ethereum.Event {
  get params(): MembershipRefunded__Params {
    return new MembershipRefunded__Params(this);
  }
}

export class MembershipRefunded__Params {
  _event: MembershipRefunded;

  constructor(event: MembershipRefunded) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MembershipStarted extends ethereum.Event {
  get params(): MembershipStarted__Params {
    return new MembershipStarted__Params(this);
  }
}

export class MembershipStarted__Params {
  _event: MembershipStarted;

  constructor(event: MembershipStarted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MembershipManager__userMembershipInfosTrialResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getDeposited(): BigInt {
    return this.value1;
  }

  getMembershipEndBlock(): BigInt {
    return this.value2;
  }
}

export class MembershipManager__userMembershipInfosYearlySubResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getDeposited(): BigInt {
    return this.value1;
  }

  getMembershipEndBlock(): BigInt {
    return this.value2;
  }
}

export class MembershipManager__userMembershipInfosYearlySubBasicResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getDeposited(): BigInt {
    return this.value1;
  }

  getMembershipEndBlock(): BigInt {
    return this.value2;
  }
}

export class MembershipManager extends ethereum.SmartContract {
  static bind(address: Address): MembershipManager {
    return new MembershipManager("MembershipManager", address);
  }

  MEMBERSHIP_NFT_BASIC(): Address {
    let result = super.call(
      "MEMBERSHIP_NFT_BASIC",
      "MEMBERSHIP_NFT_BASIC():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_MEMBERSHIP_NFT_BASIC(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "MEMBERSHIP_NFT_BASIC",
      "MEMBERSHIP_NFT_BASIC():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MEMBERSHIP_NFT_UNLIMITED(): Address {
    let result = super.call(
      "MEMBERSHIP_NFT_UNLIMITED",
      "MEMBERSHIP_NFT_UNLIMITED():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_MEMBERSHIP_NFT_UNLIMITED(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "MEMBERSHIP_NFT_UNLIMITED",
      "MEMBERSHIP_NFT_UNLIMITED():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  USDC(): Address {
    let result = super.call("USDC", "USDC():(address)", []);

    return result[0].toAddress();
  }

  try_USDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC", "USDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  beneficiary(): Address {
    let result = super.call("beneficiary", "beneficiary():(address)", []);

    return result[0].toAddress();
  }

  try_beneficiary(): ethereum.CallResult<Address> {
    let result = super.tryCall("beneficiary", "beneficiary():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  buyTrial(): BigInt {
    let result = super.call("buyTrial", "buyTrial():(uint256)", []);

    return result[0].toBigInt();
  }

  try_buyTrial(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("buyTrial", "buyTrial():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyYearlySubBasic(): BigInt {
    let result = super.call(
      "buyYearlySubBasic",
      "buyYearlySubBasic():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_buyYearlySubBasic(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyYearlySubBasic",
      "buyYearlySubBasic():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyYearlySubUnlimited(): BigInt {
    let result = super.call(
      "buyYearlySubUnlimited",
      "buyYearlySubUnlimited():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_buyYearlySubUnlimited(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyYearlySubUnlimited",
      "buyYearlySubUnlimited():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasBoughtMembership(): boolean {
    let result = super.call(
      "hasBoughtMembership",
      "hasBoughtMembership():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_hasBoughtMembership(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasBoughtMembership",
      "hasBoughtMembership():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasBoughtTrial(): boolean {
    let result = super.call("hasBoughtTrial", "hasBoughtTrial():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasBoughtTrial(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasBoughtTrial", "hasBoughtTrial():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasBoughtYearlySub(): boolean {
    let result = super.call(
      "hasBoughtYearlySub",
      "hasBoughtYearlySub():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_hasBoughtYearlySub(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasBoughtYearlySub",
      "hasBoughtYearlySub():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasBoughtYearlySubBasic(): boolean {
    let result = super.call(
      "hasBoughtYearlySubBasic",
      "hasBoughtYearlySubBasic():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_hasBoughtYearlySubBasic(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasBoughtYearlySubBasic",
      "hasBoughtYearlySubBasic():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trialDepositCost(): BigInt {
    let result = super.call(
      "trialDepositCost",
      "trialDepositCost():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_trialDepositCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trialDepositCost",
      "trialDepositCost():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trialPeriodInBlocks(): BigInt {
    let result = super.call(
      "trialPeriodInBlocks",
      "trialPeriodInBlocks():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_trialPeriodInBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trialPeriodInBlocks",
      "trialPeriodInBlocks():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userMembershipInfosTrial(
    param0: Address
  ): MembershipManager__userMembershipInfosTrialResult {
    let result = super.call(
      "userMembershipInfosTrial",
      "userMembershipInfosTrial(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new MembershipManager__userMembershipInfosTrialResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userMembershipInfosTrial(
    param0: Address
  ): ethereum.CallResult<MembershipManager__userMembershipInfosTrialResult> {
    let result = super.tryCall(
      "userMembershipInfosTrial",
      "userMembershipInfosTrial(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MembershipManager__userMembershipInfosTrialResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  userMembershipInfosYearlySub(
    param0: Address
  ): MembershipManager__userMembershipInfosYearlySubResult {
    let result = super.call(
      "userMembershipInfosYearlySub",
      "userMembershipInfosYearlySub(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new MembershipManager__userMembershipInfosYearlySubResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userMembershipInfosYearlySub(
    param0: Address
  ): ethereum.CallResult<
    MembershipManager__userMembershipInfosYearlySubResult
  > {
    let result = super.tryCall(
      "userMembershipInfosYearlySub",
      "userMembershipInfosYearlySub(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MembershipManager__userMembershipInfosYearlySubResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  userMembershipInfosYearlySubBasic(
    param0: Address
  ): MembershipManager__userMembershipInfosYearlySubBasicResult {
    let result = super.call(
      "userMembershipInfosYearlySubBasic",
      "userMembershipInfosYearlySubBasic(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new MembershipManager__userMembershipInfosYearlySubBasicResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userMembershipInfosYearlySubBasic(
    param0: Address
  ): ethereum.CallResult<
    MembershipManager__userMembershipInfosYearlySubBasicResult
  > {
    let result = super.tryCall(
      "userMembershipInfosYearlySubBasic",
      "userMembershipInfosYearlySubBasic(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MembershipManager__userMembershipInfosYearlySubBasicResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  yearlySubBasicDepositCost(): BigInt {
    let result = super.call(
      "yearlySubBasicDepositCost",
      "yearlySubBasicDepositCost():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_yearlySubBasicDepositCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "yearlySubBasicDepositCost",
      "yearlySubBasicDepositCost():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  yearlySubPeriodInBlocks(): BigInt {
    let result = super.call(
      "yearlySubPeriodInBlocks",
      "yearlySubPeriodInBlocks():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_yearlySubPeriodInBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "yearlySubPeriodInBlocks",
      "yearlySubPeriodInBlocks():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  yearlySubUnlimitedDepositCost(): BigInt {
    let result = super.call(
      "yearlySubUnlimitedDepositCost",
      "yearlySubUnlimitedDepositCost():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_yearlySubUnlimitedDepositCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "yearlySubUnlimitedDepositCost",
      "yearlySubUnlimitedDepositCost():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get usdcAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftAddressUnlimited(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nftAddressBasic(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get beneficiary_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get trialDepositCost_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get trialPeriodInBlocks_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get yearlySubUnlimitedDepositCost_(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get yearlySubBasicDepositCost_(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get yearlySubPeriodInBlocks_(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyTrialCall extends ethereum.Call {
  get inputs(): BuyTrialCall__Inputs {
    return new BuyTrialCall__Inputs(this);
  }

  get outputs(): BuyTrialCall__Outputs {
    return new BuyTrialCall__Outputs(this);
  }
}

export class BuyTrialCall__Inputs {
  _call: BuyTrialCall;

  constructor(call: BuyTrialCall) {
    this._call = call;
  }
}

export class BuyTrialCall__Outputs {
  _call: BuyTrialCall;

  constructor(call: BuyTrialCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyYearlySubBasicCall extends ethereum.Call {
  get inputs(): BuyYearlySubBasicCall__Inputs {
    return new BuyYearlySubBasicCall__Inputs(this);
  }

  get outputs(): BuyYearlySubBasicCall__Outputs {
    return new BuyYearlySubBasicCall__Outputs(this);
  }
}

export class BuyYearlySubBasicCall__Inputs {
  _call: BuyYearlySubBasicCall;

  constructor(call: BuyYearlySubBasicCall) {
    this._call = call;
  }
}

export class BuyYearlySubBasicCall__Outputs {
  _call: BuyYearlySubBasicCall;

  constructor(call: BuyYearlySubBasicCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyYearlySubUnlimitedCall extends ethereum.Call {
  get inputs(): BuyYearlySubUnlimitedCall__Inputs {
    return new BuyYearlySubUnlimitedCall__Inputs(this);
  }

  get outputs(): BuyYearlySubUnlimitedCall__Outputs {
    return new BuyYearlySubUnlimitedCall__Outputs(this);
  }
}

export class BuyYearlySubUnlimitedCall__Inputs {
  _call: BuyYearlySubUnlimitedCall;

  constructor(call: BuyYearlySubUnlimitedCall) {
    this._call = call;
  }
}

export class BuyYearlySubUnlimitedCall__Outputs {
  _call: BuyYearlySubUnlimitedCall;

  constructor(call: BuyYearlySubUnlimitedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReturnTrialCall extends ethereum.Call {
  get inputs(): ReturnTrialCall__Inputs {
    return new ReturnTrialCall__Inputs(this);
  }

  get outputs(): ReturnTrialCall__Outputs {
    return new ReturnTrialCall__Outputs(this);
  }
}

export class ReturnTrialCall__Inputs {
  _call: ReturnTrialCall;

  constructor(call: ReturnTrialCall) {
    this._call = call;
  }
}

export class ReturnTrialCall__Outputs {
  _call: ReturnTrialCall;

  constructor(call: ReturnTrialCall) {
    this._call = call;
  }
}

export class SetTrialDepositCostCall extends ethereum.Call {
  get inputs(): SetTrialDepositCostCall__Inputs {
    return new SetTrialDepositCostCall__Inputs(this);
  }

  get outputs(): SetTrialDepositCostCall__Outputs {
    return new SetTrialDepositCostCall__Outputs(this);
  }
}

export class SetTrialDepositCostCall__Inputs {
  _call: SetTrialDepositCostCall;

  constructor(call: SetTrialDepositCostCall) {
    this._call = call;
  }

  get newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTrialDepositCostCall__Outputs {
  _call: SetTrialDepositCostCall;

  constructor(call: SetTrialDepositCostCall) {
    this._call = call;
  }
}

export class SetTrialPeriodInBlocksCall extends ethereum.Call {
  get inputs(): SetTrialPeriodInBlocksCall__Inputs {
    return new SetTrialPeriodInBlocksCall__Inputs(this);
  }

  get outputs(): SetTrialPeriodInBlocksCall__Outputs {
    return new SetTrialPeriodInBlocksCall__Outputs(this);
  }
}

export class SetTrialPeriodInBlocksCall__Inputs {
  _call: SetTrialPeriodInBlocksCall;

  constructor(call: SetTrialPeriodInBlocksCall) {
    this._call = call;
  }

  get numBlocks(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTrialPeriodInBlocksCall__Outputs {
  _call: SetTrialPeriodInBlocksCall;

  constructor(call: SetTrialPeriodInBlocksCall) {
    this._call = call;
  }
}

export class SetYearlySubBasicDepositCostCall extends ethereum.Call {
  get inputs(): SetYearlySubBasicDepositCostCall__Inputs {
    return new SetYearlySubBasicDepositCostCall__Inputs(this);
  }

  get outputs(): SetYearlySubBasicDepositCostCall__Outputs {
    return new SetYearlySubBasicDepositCostCall__Outputs(this);
  }
}

export class SetYearlySubBasicDepositCostCall__Inputs {
  _call: SetYearlySubBasicDepositCostCall;

  constructor(call: SetYearlySubBasicDepositCostCall) {
    this._call = call;
  }

  get newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetYearlySubBasicDepositCostCall__Outputs {
  _call: SetYearlySubBasicDepositCostCall;

  constructor(call: SetYearlySubBasicDepositCostCall) {
    this._call = call;
  }
}

export class SetYearlySubPeriodInBlocksCall extends ethereum.Call {
  get inputs(): SetYearlySubPeriodInBlocksCall__Inputs {
    return new SetYearlySubPeriodInBlocksCall__Inputs(this);
  }

  get outputs(): SetYearlySubPeriodInBlocksCall__Outputs {
    return new SetYearlySubPeriodInBlocksCall__Outputs(this);
  }
}

export class SetYearlySubPeriodInBlocksCall__Inputs {
  _call: SetYearlySubPeriodInBlocksCall;

  constructor(call: SetYearlySubPeriodInBlocksCall) {
    this._call = call;
  }

  get numBlocks(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetYearlySubPeriodInBlocksCall__Outputs {
  _call: SetYearlySubPeriodInBlocksCall;

  constructor(call: SetYearlySubPeriodInBlocksCall) {
    this._call = call;
  }
}

export class SetYearlySubUnlimitedDepositCostCall extends ethereum.Call {
  get inputs(): SetYearlySubUnlimitedDepositCostCall__Inputs {
    return new SetYearlySubUnlimitedDepositCostCall__Inputs(this);
  }

  get outputs(): SetYearlySubUnlimitedDepositCostCall__Outputs {
    return new SetYearlySubUnlimitedDepositCostCall__Outputs(this);
  }
}

export class SetYearlySubUnlimitedDepositCostCall__Inputs {
  _call: SetYearlySubUnlimitedDepositCostCall;

  constructor(call: SetYearlySubUnlimitedDepositCostCall) {
    this._call = call;
  }

  get newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetYearlySubUnlimitedDepositCostCall__Outputs {
  _call: SetYearlySubUnlimitedDepositCostCall;

  constructor(call: SetYearlySubUnlimitedDepositCostCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
